import {
    NEARKONTAKT_PROGRAM_ID,
    INDEKSERING_PROGRAM_ID,
    NAERKONTAKT_TESTRESULT_PROGRAM_STAGE_ID,
    INDEKSERING_TESTRESULT_PROGRAM_STAGE_ID,
    NAERKONTAKT_HELSESTATUS_PROGRAM_STAGE_ID, INDEKSERING_HELSESTATUS_PROGRAM_STAGE_ID
} from "../utils/constants";

export function duplicateEventsFromNaerkontaktToIndeksering(enrollmentResponse, tei, program) {
    // Transfer only to indeksregistrering og oppfølging
    if(program !== INDEKSERING_PROGRAM_ID) {
        return;
    }
    var events = [];
    if(tei.enrollments) {
        tei.enrollments.forEach( enrollment => {
            // Transfer only data from Nærkontaktregistrering
            if (enrollment.program == NEARKONTAKT_PROGRAM_ID) {
                var testResultEvents = createDuplicateEvents(enrollment.events, enrollmentResponse.enrollment, NAERKONTAKT_TESTRESULT_PROGRAM_STAGE_ID, INDEKSERING_PROGRAM_ID, INDEKSERING_TESTRESULT_PROGRAM_STAGE_ID);
                var helsestatusEvents = createDuplicateEvents(enrollment.events, enrollmentResponse.enrollment, NAERKONTAKT_HELSESTATUS_PROGRAM_STAGE_ID, INDEKSERING_PROGRAM_ID, INDEKSERING_HELSESTATUS_PROGRAM_STAGE_ID);
                if(testResultEvents.length > 0) {
                    events = events.concat(testResultEvents);
                }
                if(helsestatusEvents.length > 0) {
                    events = events.concat(helsestatusEvents);
                }
            }
        });
    }

    return events;
}

export function transferNotesFromNaerkontaktToIndeksering(enrollmentResponse, tei, program, enrollmentService) {
    // Transfer only to indeksregistrering og oppfølging
    if(program !== INDEKSERING_PROGRAM_ID) {
        return;
    }

    if(tei.enrollments) {
        tei.enrollments.forEach( enrollment => {
            // Transfer only data from Nærkontaktregistrering
            if (enrollment.program == NEARKONTAKT_PROGRAM_ID) {
                transferNotes(enrollment.notes, enrollmentResponse, enrollmentService);
            }
        });
    }
}

function createDuplicateEvents(events, enrollmentId, fromProgramStage, toProgram, toProgramStage){
    var outEvents = [];
    events.forEach( event => {
        if(event.programStage == fromProgramStage && event.status === "COMPLETED") {
            var newEvent = angular.copy(event);
            newEvent.program = toProgram;
            newEvent.programStage = toProgramStage;
            newEvent.enrollment = enrollmentId;
            if(newEvent.notes) {
                newEvent.notes = newEvent.notes.map(note => {
                    delete note.note; // Cannot reuse note ID
                    return note;
                });
            }
            delete newEvent.event; // Cannot reuse event ID
            outEvents.push(newEvent);
        }
    });

    return outEvents;
}

function transferNotes(notes, enrollmentResponse, enrollmentService) {
    var enrollmentUpdate = angular.copy(enrollmentResponse);
    delete enrollmentUpdate.enrollmentDate; // Date on wrong format. Not needed
    delete enrollmentUpdate.incidentDate; // Date on wrong format. Not needed
    enrollmentUpdate.notes = notes.map(note => {
        delete note.note; // Cannot reuse note ID
        return note;
    });
    enrollmentService.updateForNote(enrollmentUpdate);
}

export function mergeTransferedEventsAndAutogeneratedEvents(transferredEvents, autoGeneratedEmptyEvents) {
    autoGeneratedEmptyEvents.forEach(autoEvent => {
        if(!transferredEvents.some(transferredEvent => transferredEvent.programStage === autoEvent.programStage)) {
            transferredEvents.push(autoEvent);
        }
    });

    return transferredEvents;
}

export function closeNaerkontaktEnrollment(tei, enrollmentService) {
    var naekontaktEnrollment = tei.enrollments.find(enrollment => enrollment.program === NEARKONTAKT_PROGRAM_ID && enrollment.status !== 'COMPLETED');
    if(naekontaktEnrollment) {
        naekontaktEnrollment.status = 'COMPLETED';
        enrollmentService.update(naekontaktEnrollment);
    }
}